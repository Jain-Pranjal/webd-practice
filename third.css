/* *{
    padding: 0;
    margin: 0;
} */
body{
    background-color: grey;
}

.box{
    /* inline flex is used to put all the div in the same line  */
    display: inline-flex;
    border: 2px solid blue ;
    padding: 5px;
    font-size: 50px;
    /* visibility: hidden; */
}

.box{
    /* box-shadow:  20px 20px 50px 10px rgb(255, 58, 91) inset; */
    text-shadow: 8px red;
}

/* outline is not a part of the box modal that why we can move it freely */
.textshadow{
    text-shadow: 5px 5px 10px red;
    outline: 3px solid red;
    outline-offset: 5px;
}
.nav{
    display: flex;
    justify-content: center;
    align-items: center;
}

/* bascially we always make the flexbox to the bigger container and make its items as the flex items and apply all the properties to the big container only so that it apply all those to the items  */

.liststyle li {
    display: inline-block;
  margin: 7px;
    margin-left: 7px;
  margin-left: 21px;

}

.list li{
    list-style: circle;
    list-style-type: "ðŸ‘»";
    list-style-position: inside;
    background-color: red;
    /* list-style: none; */
    /* by using this we can remove the marker  */
}

.list ul{
    background-color: rgb(107, 210, 107);
}

/* initially the marker is outside the li and in the ul but we can also change the position of the marker to be outside or inside  */


li:hover{
    background-color: aqua;
    cursor: pointer;
}

.over{
    width: 34px;
    border: 2px solid rebeccapurple;
    /* white-space:nowrap; */
    overflow:auto;
    /* height: 34px; */
    /* auto gives the scrool bar if we tackle the overflow probelm  */
    text-overflow: ellipsis;
}

/* clip also disable the prgramatically scrooling of the content  */
/* while the hidden aloows the programatically scrooling */

/* always try to use the overflow auto property as it will only add the scrool bar to the overflow happens otherwise it will not  */

@media only screen and (max-width : 455px){
    body{
        background-color: blue;

    }
}
/*          media type  */

/* media not|only screen and expresseion  */


@media only screen and (min-width: 768px) and (max-width: 1024px){
    body{
        background-color: aqua;
    }

    .boxes{
        flex-wrap: wrap;
    }
}

.boxes{
    display: flex;
    flex-direction: row;

}

.box{
    width: 200px;
    height: 200px;
    margin: 5px;
    /* position: relative; */
}


@media only screen and (orientation : portrait){
    body{

        background-color: purple;
    }
}

/* we can also change the orientation  */


/* position property */
.box1{
    position: relative;
    left: 88px;
    background-color: aqua;
}

/* by default position is static so we cannot apply top bottom left roght  */

.box2{
    z-index: 1;
    background-color: red;
}


/* the absolute position is related to the parent position 
when set the element will see its first positioned parent and will poisiioned wrt to that parent  */
.parent{
    position: relative;
    border: 2px solid red;
}

/* by making the absolute posiition the element will posiitioned itself wrt to first parent posiitioned element  */


.pos{
    border: 2px solid red;
    /* position: sticky; */
    height: 50px;
    width: 100vw;
    top: 0px;
}

/* assolute position will set to its parent positioned element other than the static position to it  */
/* the element will align iteslef acc to the parent element only eother it can be any positioned no matter othe than static */


.card{
    width: 400px;
    height: 427px;
    /* border: 2px solid red; */
    border-radius: 30px ;
    background-color: white;

}

.cardimg{
    position: relative;
  margin: auto;
  /* border: 2px solid #4f0; */
  border-radius: 18px;
  height: 219px;
  width: 286px;
  display: flex;
  align-content: center;
  justify-content: center;
  padding: 10px;

}

/* the border radius is applies to the image  */
.cardimg img{
   position: absolute;
   border-radius: 30px;
}
.text{
    padding: 10px;
    text-align: justify;
}

/* basically we are centering the content inside the div */
/* this is the container that contains the buttoon  */
/* this contaier is used for alignining the button in middle of the card */
/* for making changes inside the container we need tok target its child element */
.capsule{
    text-align: center;
    margin-top:18px;
    
}

/* padding or margin : y  x */
.capsule button{
    background-color: gray;
    font-size: 15px;
    border-radius: 20px;
    padding: 6px 19px;
    border: none;
}

button:hover{
    background-color: green;
    color: white;
    cursor: pointer;
}
/* for making the css variable  */
/* firsr we declare the variable and its properties and then we only have to change the value only  */
:root{
    /* global variable declaration  */
    --color:blue;
    --seccolor:rgb(9, 9, 104);

}

/* so just we have to change the variabel value to change the value of all overall wesite theme  */
p.var{
    color: var(--color);
}
p.var2{
    color: var(--seccolor);
}

p.localvar{
    /* this will become the local variable */
    --color:pink;
    background-color: var(--color,red);
}

/* override the global variable inside the again tag and then using it as the global variable */

/* if we want to use the as the local variable then we can use that by overriding it again in the specific block */


/* we also provide the alternate color also in case any variable is not found inside the css document  */


/* all the global variable are declared inside the :root element  */


/* media query */
/* we will use the only and not to check  */
@media only screen and (max-width:55px){
    body{
        background-color: pink;
    }
}


/* 
div:first-child{
    background-color: rgb(208, 0, 255);
} */

/* that means it will check for the first child in the doc so it will check whethet dic is tthe first child  */

.sub::first-line{
    color: var(--color);
}


/* we can also use the * selector only on the specified things also inside the div  */
.main *{
    /* now all these propertoes will only be apply to the main container only  */
    padding: 13px;;
}

/* on whole page selection done */
/* ::selection{
    background-color: black;
    color: yellow;
} */

.sub:nth-child(odd){
    background-color: cadetblue;
}

/* by using this we can add content dynamically using the css */
.main::before{
    margin: 55px;
    content: "pranjal jain is jain";
    color: red;
}

.main::after{
    content: "this is the content after the main ";
    content: "we can use this for adding the dynamic content using the css dynamcially ";
    /* content-visibility: none; */
}


.sub::selection{
    background-color: black;
    color: yellow;
    
}

/* we can target the placeholder also  */
input::placeholder{
    color: red;
}




.container{
    border: 2px solid red;
    display: flex;
    height: 80vh;
    /* apply the properties to center the items in the container  */
    justify-content: center;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: center;
    /* basically we use the align content to group all the flex box and then dok the alignment of the followingf */
    
    gap: 5px;
}

.items {  
    /* flex-grow: 1; */
    height: 92px;
    width: 92px;
    border: 2px solid black;
    /* margin: 4px; */
    background-color: blueviolet;
    flex-grow: 5;
    flex-shrink: 2;
}

/* flex grow will make the flex itesm to grow as per the sixe entred and flex shrunk is the ability for ana element to shrink whwnever necessary */



.main-trans{
    margin: 55px;
    width: 100vw;
    height: 80vh;
    border: 2px solid purple;
}

.trans{
    height: 150px;
    width: 150px;
    background-color: beige;
    border: 2px solid black;
    display: flex;
    justify-content: center;
    align-items: center;
    /* transform: rotate(1.5turn); */
    /* transform: translate(55px); */
    /* transform: scale(1.6); */
    transform: translateX(1.6px) skewX(40deg) scale(1.2);
    transform: translateX(60vw) translateY(50vh);
}


/* we can appy multiple transform propoerty separted by space  */

/* translate property  */
.trans{
    transition-property: all;
    transition-duration: 1.5s;
    transition-timing-function: ease-out;
    transition-delay: 1.5s;
    transition: all 1500ms cubic-bezier(0.03, 0.98, 0.52, 0.99) 0s; transform: perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1);
}

/* use this shorthand property */
.trans{
    translate: all 1.5s ease-in 3s;
}

.sidenav{
    width: 20vw;
    height: 100vh;
    border: 2px solid red;
    transform: translateX(-103%) ;

    
}

.elements{
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;

}
.elements li{
    list-style: none;
    padding: 15px;
}




/* for making the animation we use the keyframes */
@keyframes pranjalkaanimation {
    from{

    }
    to{
        transform: translate(1000px);
    }
}